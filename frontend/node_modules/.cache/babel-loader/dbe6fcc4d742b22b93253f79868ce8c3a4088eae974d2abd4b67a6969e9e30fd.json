{"ast":null,"code":"import axios from 'axios';\n\n// API Configuration\nconst API_BASE_URL = 'https://jj6skt98b3.execute-api.us-east-1.amazonaws.com/dev';\nexport const apiConfig = {\n  baseURL: API_BASE_URL,\n  endpoints: {\n    intentMapper: '/intent-mapper',\n    addProcedure: '/add-doctor-procedure',\n    getQuote: '/get-quote',\n    showHistory: '/show-history'\n  }\n};\n\n// API Client\n\nclass APIClient {\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  // Chat with Bedrock Agent\n  async chatWithAgent(message, sessionId = 'frontend-session', conversationHistory = []) {\n    try {\n      const response = await this.client.post('/intent-mapper', {\n        text: message,\n        sessionId: sessionId,\n        conversationHistory: conversationHistory\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Chat error:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  // Direct API calls (bypass Bedrock Agent for faster responses)\n  async addProcedure(procedureData) {\n    try {\n      const response = await this.client.post('/add-doctor-procedure', procedureData);\n      return response.data;\n    } catch (error) {\n      console.error('Add procedure error:', error);\n      throw this.handleError(error);\n    }\n  }\n  async getQuote(procedureCode) {\n    try {\n      const response = await this.client.get(`/get-quote?procedureCode=${encodeURIComponent(procedureCode)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get quote error:', error);\n      throw this.handleError(error);\n    }\n  }\n  async getHistory(doctorName, limit = 5) {\n    try {\n      const response = await this.client.get(`/show-history?doctorName=${encodeURIComponent(doctorName)}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get history error:', error);\n      throw this.handleError(error);\n    }\n  }\n  handleError(error) {\n    if (error.response) {\n      var _error$response$data;\n      // Server responded with error status\n      const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Server error occurred';\n      return new Error(`${error.response.status}: ${message}`);\n    } else if (error.request) {\n      // Network error\n      return new Error('Network error - please check your connection');\n    } else {\n      // Other error\n      return new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n}\nexport const apiClient = new APIClient();","map":{"version":3,"names":["axios","API_BASE_URL","apiConfig","baseURL","endpoints","intentMapper","addProcedure","getQuote","showHistory","APIClient","constructor","client","create","timeout","headers","chatWithAgent","message","sessionId","conversationHistory","response","post","text","data","error","console","handleError","procedureData","procedureCode","get","encodeURIComponent","getHistory","doctorName","limit","_error$response$data","Error","status","request","apiClient"],"sources":["/Users/huilianglui/Documents/GitHub/doctor-procedures-bedrock-app/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\n// API Configuration\nconst API_BASE_URL = 'https://jj6skt98b3.execute-api.us-east-1.amazonaws.com/dev';\n\nexport const apiConfig = {\n  baseURL: API_BASE_URL,\n  endpoints: {\n    intentMapper: '/intent-mapper',\n    addProcedure: '/add-doctor-procedure',\n    getQuote: '/get-quote',\n    showHistory: '/show-history'\n  }\n};\n\n// API Client\n\nclass APIClient {\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n  }\n\n  // Chat with Bedrock Agent\n  async chatWithAgent(message, sessionId = 'frontend-session', conversationHistory = []) {\n    try {\n      const response = await this.client.post('/intent-mapper', {\n        text: message,\n        sessionId: sessionId,\n        conversationHistory: conversationHistory\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Chat error:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  // Direct API calls (bypass Bedrock Agent for faster responses)\n  async addProcedure(procedureData) {\n    try {\n      const response = await this.client.post('/add-doctor-procedure', procedureData);\n      return response.data;\n    } catch (error) {\n      console.error('Add procedure error:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  async getQuote(procedureCode) {\n    try {\n      const response = await this.client.get(`/get-quote?procedureCode=${encodeURIComponent(procedureCode)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get quote error:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  async getHistory(doctorName, limit = 5) {\n    try {\n      const response = await this.client.get(`/show-history?doctorName=${encodeURIComponent(doctorName)}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get history error:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'Server error occurred';\n      return new Error(`${error.response.status}: ${message}`);\n    } else if (error.request) {\n      // Network error\n      return new Error('Network error - please check your connection');\n    } else {\n      // Other error\n      return new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n}\n\nexport const apiClient = new APIClient();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}