{"ast":null,"code":"import axios from'axios';// API Configuration\nconst API_BASE_URL='https://jj6skt98b3.execute-api.us-east-1.amazonaws.com/dev';export const apiConfig={baseURL:API_BASE_URL,endpoints:{intentMapper:'/intent-mapper',addProcedure:'/add-doctor-procedure',getQuote:'/get-quote',showHistory:'/show-history'}};// API Client\nclass APIClient{constructor(){this.client=axios.create({baseURL:API_BASE_URL,timeout:30000,headers:{'Content-Type':'application/json'}});}// Chat with Bedrock Agent\nasync chatWithAgent(message){let sessionId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'frontend-session';let conversationHistory=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];try{const response=await this.client.post('/intent-mapper',{text:message,sessionId:sessionId,conversationHistory:conversationHistory});return response.data;}catch(error){console.error('Chat error:',error);throw this.handleError(error);}}// Direct API calls (bypass Bedrock Agent for faster responses)\nasync addProcedure(procedureData){try{const response=await this.client.post('/add-doctor-procedure',procedureData);return response.data;}catch(error){console.error('Add procedure error:',error);throw this.handleError(error);}}async getQuote(procedureCode){try{const response=await this.client.get(`/get-quote?procedureCode=${encodeURIComponent(procedureCode)}`);return response.data;}catch(error){console.error('Get quote error:',error);throw this.handleError(error);}}async getHistory(doctorName){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;try{const response=await this.client.get(`/show-history?doctorName=${encodeURIComponent(doctorName)}&limit=${limit}`);return response.data;}catch(error){console.error('Get history error:',error);throw this.handleError(error);}}handleError(error){if(error.response){var _error$response$data;// Server responded with error status\nconst message=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Server error occurred';return new Error(`${error.response.status}: ${message}`);}else if(error.request){// Network error\nreturn new Error('Network error - please check your connection');}else{// Other error\nreturn new Error(error.message||'An unexpected error occurred');}}}export const apiClient=new APIClient();","map":{"version":3,"names":["axios","API_BASE_URL","apiConfig","baseURL","endpoints","intentMapper","addProcedure","getQuote","showHistory","APIClient","constructor","client","create","timeout","headers","chatWithAgent","message","sessionId","arguments","length","undefined","conversationHistory","response","post","text","data","error","console","handleError","procedureData","procedureCode","get","encodeURIComponent","getHistory","doctorName","limit","_error$response$data","Error","status","request","apiClient"],"sources":["/Users/huilianglui/Documents/GitHub/doctor-procedures-bedrock-app/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\n// API Configuration\nconst API_BASE_URL = 'https://jj6skt98b3.execute-api.us-east-1.amazonaws.com/dev';\n\nexport const apiConfig = {\n  baseURL: API_BASE_URL,\n  endpoints: {\n    intentMapper: '/intent-mapper',\n    addProcedure: '/add-doctor-procedure',\n    getQuote: '/get-quote',\n    showHistory: '/show-history'\n  }\n};\n\n// API Client\n\nclass APIClient {\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n  }\n\n  // Chat with Bedrock Agent\n  async chatWithAgent(message, sessionId = 'frontend-session', conversationHistory = []) {\n    try {\n      const response = await this.client.post('/intent-mapper', {\n        text: message,\n        sessionId: sessionId,\n        conversationHistory: conversationHistory\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Chat error:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  // Direct API calls (bypass Bedrock Agent for faster responses)\n  async addProcedure(procedureData) {\n    try {\n      const response = await this.client.post('/add-doctor-procedure', procedureData);\n      return response.data;\n    } catch (error) {\n      console.error('Add procedure error:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  async getQuote(procedureCode) {\n    try {\n      const response = await this.client.get(`/get-quote?procedureCode=${encodeURIComponent(procedureCode)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get quote error:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  async getHistory(doctorName, limit = 5) {\n    try {\n      const response = await this.client.get(`/show-history?doctorName=${encodeURIComponent(doctorName)}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get history error:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'Server error occurred';\n      return new Error(`${error.response.status}: ${message}`);\n    } else if (error.request) {\n      // Network error\n      return new Error('Network error - please check your connection');\n    } else {\n      // Other error\n      return new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n}\n\nexport const apiClient = new APIClient();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}